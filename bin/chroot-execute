#!/usr/bin/env bash

source /usr/libexec/paludis/echo_functions.bash 2>/dev/null || die "Failed to source echo_functions.bash"

CHROOT_PREFIX=$(dirname ${0})/.. # is there a better way?
TARGET_CHROOT="${1}"
if [[ -z ${TARGET_CHROOT} ]]; then
	eerror "Expected one argument (the name of the chroot)"
	exit 1
fi
shift # shift TARGET_CHROOT off of $@

if [[ -z ${@} ]]; then
	eerror "Expected some arguments to execute, but got none"
	exit 1
fi

# Load our functions
source "${CHROOT_PREFIX}/libexec/chroot-manager/chroot-functions.bash"
# Load our settings
source "${CHROOT_PREFIX}/etc/chroot-manager.conf"

# Be smart and use sudo for when we aren't root
sudo=""
if [[ ${UID} != 0 ]]; then
	sudo="sudo -H"
fi

# Do all sorts of binds all over the place
${sudo} ${CHROOT_PREFIX}/bin/chroot-mount ${TARGET_CHROOT}

# Initialize the env
init_chroot_env  ${TARGET_CHROOT}


# Call linux32 if we're going into an x86 chroot
linux32=""
if [[ ${TARGET_CHROOT} =~ x86 ]]; then
	linux32=linux32
fi

${sudo} ${linux32} chroot ${CHROOT_HOME} "$@"
